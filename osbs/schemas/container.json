{
  "$schema": "http://json-schema.org/draft-06/schema#",

  "title": "container image build configuration",

  "type": ["object", "null"],
  "anyOf": [
      {
         "properties": {
            "go": {
              "type": "object",
              "properties": {
                "modules": {
                  "type": ["array", "null"],
                  "items": {
                    "type": "object",
                    "properties": {
                      "module": {
                        "type": "string",
                        "description": "Top-level Go module (package) name which will be built",
                        "examples": [
                          "example.com/go/packagename",
                          "example.com/go/anotherpackage"
                        ]
                      },
                      "archive": {
                        "type": "string",
                        "description": "Possibly-compressed archive containing full source code including dependencies",
                        "examples": [
                          "anotherpackage.tar.gz"
                        ]
                      },
                      "path": {
                        "type": "string",
                        "description": "Path to directory containing source code (or its parent), possibly within archive",
                        "examples": [
                          "anotherpackage-v0.54.1"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "required": ["module"]
                  }
                }
              },
              "additionalProperties": false
            },
            "platforms": {"$ref": "#/definitions/all_platforms"},
            "autorebuild": {"$ref": "#/definitions/autorebuild"},
            "compose": {"$ref": "#/definitions/compose"},
            "flatpak": {"$ref": "#/definitions/flatpak"},
            "operator_manifests": {"$ref": "#/definitions/operator_manifests"},
            "image_build_method": {"$ref": "#/definitions/image_build_method"},
            "tags": {"$ref": "#/definitions/tags"},
            "set_release_env": {"$ref": "#/definitions/set_release_env"},
            "version": {"$ref": "#/definitions/version"}
         },
         "additionalProperties": false
      },

      {
         "properties": {
            "platforms": {"$ref": "#/definitions/all_platforms"},
            "autorebuild": {"$ref": "#/definitions/autorebuild"},
            "compose": {"$ref": "#/definitions/compose"},
            "flatpak": {"$ref": "#/definitions/flatpak"},
            "operator_manifests": {"$ref": "#/definitions/operator_manifests"},
            "image_build_method": {"$ref": "#/definitions/image_build_method"},
            "remote_source": {
              "type": ["object", "null"],
              "properties": {
                "repo": {
                  "type": "string",
                  "description": "URL to the SCM repository",
                  "examples": [
                    "https://git.example.com/team/repo.git",
                    "https://git.example.com/another-repo.git"
                  ]
                },
                "ref": {
                  "type": "string",
                  "pattern": "^[0-9a-z]{40}$",
                  "description": "SCM reference to fetch from repository",
                  "examples": [
                    "b55c00f45ec3dfee0c766cea3d395d6e21cc2e5a",
                    "651abc41170e52866148cc0c99c3671a2ace7002"
                  ]
                },
                "pkg_managers": {
                  "description": "list of package managers to be used for resolving dependencies",
                  "type": ["array", "null"],
                  "items": {
                      "type": "string",
                      "examples": [
                        "gomod"
                      ]
                  }
                },
                "flags": {
                  "description": "list of flags to pass to the Cachito request",
                  "type": ["array", "null"],
                  "items": {
                      "type": "string",
                      "examples": [
                        "enable-confeti",
                        "enable-party-popper"
                      ]
                  }
                },
                "packages": {
                  "description": "the packages object to pass to the Cachito request",
                  "type": ["object", "null"],
                  "examples": [
                    {"npm": [{"path": "client"}, {"path": "proxy"}]}
                  ],
                  "additionalProperties" : {
                    "type" : "array",
                    "items": {
                      "type": "object",
                      "examples": [
                        {"path": "client"},
                        {"path": "proxy"}
                      ],
                      "minProperties": 1
                    }
                  }
                }
              },
              "additionalProperties": false,
              "required": ["repo", "ref"]
            },
            "tags": {"$ref": "#/definitions/tags"},
            "set_release_env": {"$ref": "#/definitions/set_release_env"},
            "version": {"$ref": "#/definitions/version"}
         },
         "additionalProperties": false
      }
  ],

  "definitions": {
    "platform": {
      "type": "string",
      "description": "Platform name",
      "examples": [
        "x86_64",
        "ppc64le",
        "armhfp"
      ]
    },
    "platforms": {
      "oneOf": [
        {
          "$ref": "#/definitions/platform"
        },
        { "type": "array",
          "items": {
            "$ref": "#/definitions/platform"
          }
        }
      ]
    },
    "all_platforms": {
      "type": ["object", "null"],
      "properties": {
        "only": {
          "$ref": "#/definitions/platforms",
          "description": "Platform(s) to build image for"
        },
        "not": {
          "$ref": "#/definitions/platforms",
          "description": "Platform(s) not to build image for"
        }
      },
      "additionalProperties": false
    },
    "autorebuild": {
      "type": ["object", "null"],
      "properties": {
        "from_latest": {
          "description": "Whether to rebuild from the latest commit",
          "type": "boolean"
        },
        "add_timestamp_to_release": {
          "description": "Whether to append timestamp to explicitly specified release for autorebuilds",
          "type": "boolean"
        },
        "ignore_isolated_builds": {
          "description": "Whether to triger autorebuilds for isolated parent build",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "compose": {
      "type": ["object", "null"],
      "properties": {
        "packages": {
          "description": "names of RPMs to include",
          "type": ["array", "null"],
          "items": {
              "type": "string",
              "examples": [
                "httpd",
                "httpd-devel"
              ]
          }
        },
        "pulp_repos": {
          "description": "whether to build pulp composes",
          "type": "boolean"
        },
        "modules": {
          "description": "names of modules to include",
          "type": ["array", "null"],
          "items": {
              "type": "string",
              "examples": [
                "module_name1:stream1",
                "module_name2:stream1"
              ]
          }
        },
        "signing_intent": {
          "type": "string",
          "description": "Name of ODCS signing intent used to verify package signatures",
          "examples": [
            "release",
            "unsigned"
          ]
        },
        "inherit": {
          "description": "enable inheritance of yum repourls and composes from baseimage build (disabled by default)",
          "type": "boolean"
        },
        "ignore_absent_pulp_repos": {
          "description": "ignore absent content sets",
          "type": "boolean"
        },
        "include_unpublished_pulp_repos": {
          "description": "include unpublished repos in pulp input content-sets",
          "type": "boolean"
        },
        "multilib_method": {
          "description": "list of options to decide if a package is multilib",
          "type": ["array", "null"],
          "items": {
              "enum": ["none", "iso", "runtime", "devel", "all"]
          }
        },
        "multilib_arches": {
          "description": "list of arches which will get multilib composes",
          "type": ["array", "null"],
          "items": {
              "type": "string",
              "examples": [
                "x86_64",
                "ppc64le"
              ]
          }
        },
        "modular_koji_tags": {
          "description": "tags of modular Koji content to include in the build, if True is used, tag from koji target will be used",
          "type": ["array", "null", "boolean"],
          "items": {
              "type": "string",
              "examples": [
                "f30-modules",
                "rhel-8.2.1-modules"
              ]
          }
        },
        "build_only_content_sets": {
          "desription": "Content sets used only for building content, not for distribution",
          "type": ["object", "null"],
          "patternProperties": {
            "^[a-z].*$": {
              "type": "array",
              "description": "List of content sets for specific architecture",
              "minItems": 1,
              "items": {
                "type": "string",
                "pattern": "^.*-rpms$"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    "operator_manifests": {
      "description": "Configuration for operator manifest bundle builds",
      "type": "object",
      "properties": {
        "manifests_dir": {
          "description": "Relative path to directory containing operator manifests",
          "type": "string",
          "pattern": "^[^/].*$"
        },
        "enable_digest_pinning": {
          "description": "Replace floating tags with manifest list digests?",
          "type": "boolean",
          "default": true
        },
        "enable_repo_replacements": {
          "description": "Replace namespace/repo based on component label in image?",
          "type": "boolean",
          "default": true
        },
        "enable_registry_replacements": {
          "description": "Replace registry based on OSBS site configuration?",
          "type": "boolean",
          "default": true
        },
        "repo_replacements": {
          "description": "Additional replacements for repos not available in OSBS site config",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "registry": {
                "description": "Configure replacements for this registry",
                "type": "string"
              },
              "package_mappings": {
                "description": "Repo replacement mappings",
                "type": "object",
                "patternProperties": {
                  ".*": {"type": "string"}
                },
                "examples": [
                  {"foo-bar": "foo/bar", "spam-eggs": "spam/eggs"}
                ]
              }
            },
            "required": ["registry", "package_mappings"],
            "additionalProperties": false
          }
        }
      },
      "required": ["manifests_dir"],
      "additionalProperties": false
    },
    "flatpak": {
      "type": ["object", "null"],
      "description": "Information used to build a Flatpak"
    },
    "image_build_method": {
      "description": "build-step plugin to be used",
      "enum": ["docker_api", "imagebuilder", "buildah_bud"]
    },
    "tags": {
      "type": "array",
      "description": "Tags to apply to the built image",
      "examples": [
        "latest",
        "1.0",
        "demo"
      ]
    },
    "set_release_env": {
      "type": "string",
      "description": "Name of an environment variable to set in the Dockerfile file with the release number",
      "examples": [
        "CONTAINER_RELEASE_NVR",
        "IMAGE_RELEASE",
        "OS_BUILD"
      ]
    },
    "version": {
      "type": "integer",
      "description": "Deprecated option kept for backwards compatibility. Should not be used",
      "minimum": 1,
      "default": 1
    }
  }
}
